
simple-malloc-via-immediate-oob-heap-taint_gcc403-O0-g:     file format elf32-i386

Disassembly of section .init:

08048280 <_init>:
 8048280:	55                   	push   ebp
 8048281:	89 e5                	mov    ebp,esp
 8048283:	83 ec 08             	sub    esp,0x8
 8048286:	e8 79 00 00 00       	call   8048304 <call_gmon_start>
 804828b:	e8 c7 00 00 00       	call   8048357 <frame_dummy>
 8048290:	e8 0f 02 00 00       	call   80484a4 <__do_global_ctors_aux>
 8048295:	c9                   	leave  
 8048296:	c3                   	ret    
Disassembly of section .plt:

08048298 <malloc@plt-0x10>:
 8048298:	ff 35 dc 95 04 08    	push   DWORD PTR ds:0x80495dc
 804829e:	ff 25 e0 95 04 08    	jmp    DWORD PTR ds:0x80495e0
 80482a4:	00 00                	add    BYTE PTR [eax],al
	...

080482a8 <malloc@plt>:
 80482a8:	ff 25 e4 95 04 08    	jmp    DWORD PTR ds:0x80495e4
 80482ae:	68 00 00 00 00       	push   0x0
 80482b3:	e9 e0 ff ff ff       	jmp    8048298 <_init+0x18>

080482b8 <__libc_start_main@plt>:
 80482b8:	ff 25 e8 95 04 08    	jmp    DWORD PTR ds:0x80495e8
 80482be:	68 08 00 00 00       	push   0x8
 80482c3:	e9 d0 ff ff ff       	jmp    8048298 <_init+0x18>

080482c8 <__gmon_start__@plt>:
 80482c8:	ff 25 ec 95 04 08    	jmp    DWORD PTR ds:0x80495ec
 80482ce:	68 10 00 00 00       	push   0x10
 80482d3:	e9 c0 ff ff ff       	jmp    8048298 <_init+0x18>
Disassembly of section .text:

080482e0 <_start>:
 80482e0:	31 ed                	xor    ebp,ebp
 80482e2:	5e                   	pop    esi
 80482e3:	89 e1                	mov    ecx,esp
 80482e5:	83 e4 f0             	and    esp,0xfffffff0
 80482e8:	50                   	push   eax
 80482e9:	54                   	push   esp
 80482ea:	52                   	push   edx
 80482eb:	68 40 84 04 08       	push   0x8048440
 80482f0:	68 d0 83 04 08       	push   0x80483d0
 80482f5:	51                   	push   ecx
 80482f6:	56                   	push   esi
 80482f7:	68 7c 83 04 08       	push   0x804837c
 80482fc:	e8 b7 ff ff ff       	call   80482b8 <__libc_start_main@plt>
 8048301:	f4                   	hlt    
 8048302:	90                   	nop    
 8048303:	90                   	nop    

08048304 <call_gmon_start>:
 8048304:	55                   	push   ebp
 8048305:	89 e5                	mov    ebp,esp
 8048307:	53                   	push   ebx
 8048308:	51                   	push   ecx
 8048309:	e8 00 00 00 00       	call   804830e <call_gmon_start+0xa>
 804830e:	5b                   	pop    ebx
 804830f:	81 c3 ca 12 00 00    	add    ebx,0x12ca
 8048315:	8b 93 fc ff ff ff    	mov    edx,DWORD PTR [ebx-0x4]
 804831b:	85 d2                	test   edx,edx
 804831d:	74 05                	je     8048324 <call_gmon_start+0x20>
 804831f:	e8 a4 ff ff ff       	call   80482c8 <__gmon_start__@plt>
 8048324:	58                   	pop    eax
 8048325:	5b                   	pop    ebx
 8048326:	c9                   	leave  
 8048327:	c3                   	ret    

08048328 <__do_global_dtors_aux>:
 8048328:	55                   	push   ebp
 8048329:	89 e5                	mov    ebp,esp
 804832b:	83 ec 08             	sub    esp,0x8
 804832e:	80 3d fc 95 04 08 00 	cmp    BYTE PTR ds:0x80495fc,0x0
 8048335:	74 0c                	je     8048343 <__do_global_dtors_aux+0x1b>
 8048337:	eb 1c                	jmp    8048355 <__do_global_dtors_aux+0x2d>
 8048339:	83 c0 04             	add    eax,0x4
 804833c:	a3 f8 95 04 08       	mov    ds:0x80495f8,eax
 8048341:	ff d2                	call   edx
 8048343:	a1 f8 95 04 08       	mov    eax,ds:0x80495f8
 8048348:	8b 10                	mov    edx,DWORD PTR [eax]
 804834a:	85 d2                	test   edx,edx
 804834c:	75 eb                	jne    8048339 <__do_global_dtors_aux+0x11>
 804834e:	c6 05 fc 95 04 08 01 	mov    BYTE PTR ds:0x80495fc,0x1
 8048355:	c9                   	leave  
 8048356:	c3                   	ret    

08048357 <frame_dummy>:
 8048357:	55                   	push   ebp
 8048358:	89 e5                	mov    ebp,esp
 804835a:	83 ec 08             	sub    esp,0x8
 804835d:	a1 08 95 04 08       	mov    eax,ds:0x8049508
 8048362:	85 c0                	test   eax,eax
 8048364:	74 12                	je     8048378 <frame_dummy+0x21>
 8048366:	b8 00 00 00 00       	mov    eax,0x0
 804836b:	85 c0                	test   eax,eax
 804836d:	74 09                	je     8048378 <frame_dummy+0x21>
 804836f:	c7 04 24 08 95 04 08 	mov    DWORD PTR [esp],0x8049508
 8048376:	ff d0                	call   eax
 8048378:	c9                   	leave  
 8048379:	c3                   	ret    
 804837a:	90                   	nop    
 804837b:	90                   	nop    

0804837c <main>:
#include <stdlib.h>

int main(int argc, char **argv)
{
 804837c:	55                   	push   ebp
 804837d:	89 e5                	mov    ebp,esp
 804837f:	83 ec 18             	sub    esp,0x18
 8048382:	83 e4 f0             	and    esp,0xfffffff0
 8048385:	b8 00 00 00 00       	mov    eax,0x0
 804838a:	83 c0 0f             	add    eax,0xf
 804838d:	83 c0 0f             	add    eax,0xf
 8048390:	c1 e8 04             	shr    eax,0x4
 8048393:	c1 e0 04             	shl    eax,0x4
 8048396:	29 c4                	sub    esp,eax
	void *p = malloc(16);
 8048398:	c7 04 24 10 00 00 00 	mov    DWORD PTR [esp],0x10
 804839f:	e8 04 ff ff ff       	call   80482a8 <malloc@plt>
 80483a4:	89 45 fc             	mov    DWORD PTR [ebp-4],eax
	((char *)p)[0] = **argv;
 80483a7:	8b 55 fc             	mov    edx,DWORD PTR [ebp-4]
 80483aa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+12]
 80483ad:	8b 00                	mov    eax,DWORD PTR [eax]
 80483af:	0f b6 00             	movzx  eax,BYTE PTR [eax]
 80483b2:	88 02                	mov    BYTE PTR [edx],al
	////<exploitable />
	((char *)p)[16] = ((char *)p)[0];
 80483b4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-4]
 80483b7:	8d 50 10             	lea    edx,[eax+16]
 80483ba:	8b 45 fc             	mov    eax,DWORD PTR [ebp-4]
 80483bd:	0f b6 00             	movzx  eax,BYTE PTR [eax]
 80483c0:	88 02                	mov    BYTE PTR [edx],al
}
 80483c2:	c9                   	leave  
 80483c3:	c3                   	ret    
 80483c4:	90                   	nop    
 80483c5:	90                   	nop    
 80483c6:	90                   	nop    
 80483c7:	90                   	nop    
 80483c8:	90                   	nop    
 80483c9:	90                   	nop    
 80483ca:	90                   	nop    
 80483cb:	90                   	nop    
 80483cc:	90                   	nop    
 80483cd:	90                   	nop    
 80483ce:	90                   	nop    
 80483cf:	90                   	nop    

080483d0 <__libc_csu_init>:
 80483d0:	55                   	push   ebp
 80483d1:	89 e5                	mov    ebp,esp
 80483d3:	83 ec 18             	sub    esp,0x18
 80483d6:	89 5d f4             	mov    DWORD PTR [ebp-12],ebx
 80483d9:	e8 bf 00 00 00       	call   804849d <__i686.get_pc_thunk.bx>
 80483de:	81 c3 fa 11 00 00    	add    ebx,0x11fa
 80483e4:	89 75 f8             	mov    DWORD PTR [ebp-8],esi
 80483e7:	89 7d fc             	mov    DWORD PTR [ebp-4],edi
 80483ea:	e8 91 fe ff ff       	call   8048280 <_init>
 80483ef:	8d 83 20 ff ff ff    	lea    eax,[ebx-0xe0]
 80483f5:	8d 93 20 ff ff ff    	lea    edx,[ebx-0xe0]
 80483fb:	29 d0                	sub    eax,edx
 80483fd:	c1 f8 02             	sar    eax,0x2
 8048400:	89 45 f0             	mov    DWORD PTR [ebp-16],eax
 8048403:	75 0d                	jne    8048412 <__libc_csu_init+0x42>
 8048405:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-12]
 8048408:	8b 75 f8             	mov    esi,DWORD PTR [ebp-8]
 804840b:	8b 7d fc             	mov    edi,DWORD PTR [ebp-4]
 804840e:	89 ec                	mov    esp,ebp
 8048410:	5d                   	pop    ebp
 8048411:	c3                   	ret    
 8048412:	31 ff                	xor    edi,edi
 8048414:	89 d6                	mov    esi,edx
 8048416:	8d 76 00             	lea    esi,[esi]
 8048419:	8d bc 27 00 00 00 00 	lea    edi,[edi]
 8048420:	47                   	inc    edi
 8048421:	ff 16                	call   DWORD PTR [esi]
 8048423:	83 c6 04             	add    esi,0x4
 8048426:	3b 7d f0             	cmp    edi,DWORD PTR [ebp-16]
 8048429:	72 f5                	jb     8048420 <__libc_csu_init+0x50>
 804842b:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-12]
 804842e:	8b 75 f8             	mov    esi,DWORD PTR [ebp-8]
 8048431:	8b 7d fc             	mov    edi,DWORD PTR [ebp-4]
 8048434:	89 ec                	mov    esp,ebp
 8048436:	5d                   	pop    ebp
 8048437:	c3                   	ret    
 8048438:	90                   	nop    
 8048439:	8d b4 26 00 00 00 00 	lea    esi,[esi]

08048440 <__libc_csu_fini>:
 8048440:	55                   	push   ebp
 8048441:	89 e5                	mov    ebp,esp
 8048443:	83 ec 18             	sub    esp,0x18
 8048446:	89 5d f4             	mov    DWORD PTR [ebp-12],ebx
 8048449:	e8 4f 00 00 00       	call   804849d <__i686.get_pc_thunk.bx>
 804844e:	81 c3 8a 11 00 00    	add    ebx,0x118a
 8048454:	89 75 f8             	mov    DWORD PTR [ebp-8],esi
 8048457:	89 7d fc             	mov    DWORD PTR [ebp-4],edi
 804845a:	8d 83 20 ff ff ff    	lea    eax,[ebx-0xe0]
 8048460:	8d 93 20 ff ff ff    	lea    edx,[ebx-0xe0]
 8048466:	29 d0                	sub    eax,edx
 8048468:	c1 f8 02             	sar    eax,0x2
 804846b:	89 45 f0             	mov    DWORD PTR [ebp-16],eax
 804846e:	48                   	dec    eax
 804846f:	83 f8 ff             	cmp    eax,0xffffffff
 8048472:	74 17                	je     804848b <__libc_csu_fini+0x4b>
 8048474:	8d 34 82             	lea    esi,[edx+eax*4]
 8048477:	31 ff                	xor    edi,edi
 8048479:	8d b4 26 00 00 00 00 	lea    esi,[esi]
 8048480:	47                   	inc    edi
 8048481:	ff 16                	call   DWORD PTR [esi]
 8048483:	83 ee 04             	sub    esi,0x4
 8048486:	39 7d f0             	cmp    DWORD PTR [ebp-16],edi
 8048489:	75 f5                	jne    8048480 <__libc_csu_fini+0x40>
 804848b:	e8 40 00 00 00       	call   80484d0 <_fini>
 8048490:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-12]
 8048493:	8b 75 f8             	mov    esi,DWORD PTR [ebp-8]
 8048496:	8b 7d fc             	mov    edi,DWORD PTR [ebp-4]
 8048499:	89 ec                	mov    esp,ebp
 804849b:	5d                   	pop    ebp
 804849c:	c3                   	ret    

0804849d <__i686.get_pc_thunk.bx>:
 804849d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
 80484a0:	c3                   	ret    
 80484a1:	90                   	nop    
 80484a2:	90                   	nop    
 80484a3:	90                   	nop    

080484a4 <__do_global_ctors_aux>:
 80484a4:	55                   	push   ebp
 80484a5:	89 e5                	mov    ebp,esp
 80484a7:	53                   	push   ebx
 80484a8:	83 ec 04             	sub    esp,0x4
 80484ab:	a1 f8 94 04 08       	mov    eax,ds:0x80494f8
 80484b0:	83 f8 ff             	cmp    eax,0xffffffff
 80484b3:	74 12                	je     80484c7 <__do_global_ctors_aux+0x23>
 80484b5:	bb f8 94 04 08       	mov    ebx,0x80494f8
 80484ba:	ff d0                	call   eax
 80484bc:	8b 43 fc             	mov    eax,DWORD PTR [ebx-4]
 80484bf:	83 eb 04             	sub    ebx,0x4
 80484c2:	83 f8 ff             	cmp    eax,0xffffffff
 80484c5:	75 f3                	jne    80484ba <__do_global_ctors_aux+0x16>
 80484c7:	83 c4 04             	add    esp,0x4
 80484ca:	5b                   	pop    ebx
 80484cb:	5d                   	pop    ebp
 80484cc:	c3                   	ret    
 80484cd:	90                   	nop    
 80484ce:	90                   	nop    
 80484cf:	90                   	nop    
Disassembly of section .fini:

080484d0 <_fini>:
 80484d0:	55                   	push   ebp
 80484d1:	89 e5                	mov    ebp,esp
 80484d3:	53                   	push   ebx
 80484d4:	50                   	push   eax
 80484d5:	e8 00 00 00 00       	call   80484da <_fini+0xa>
 80484da:	5b                   	pop    ebx
 80484db:	81 c3 fe 10 00 00    	add    ebx,0x10fe
 80484e1:	e8 42 fe ff ff       	call   8048328 <__do_global_dtors_aux>
 80484e6:	58                   	pop    eax
 80484e7:	5b                   	pop    ebx
 80484e8:	c9                   	leave  
 80484e9:	c3                   	ret    
