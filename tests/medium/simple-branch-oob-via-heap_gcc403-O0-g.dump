
simple-branch-oob-via-heap_gcc403-O0-g:     file format elf32-i386

Disassembly of section .init:

08048280 <_init>:
 8048280:	55                   	push   ebp
 8048281:	89 e5                	mov    ebp,esp
 8048283:	83 ec 08             	sub    esp,0x8
 8048286:	e8 79 00 00 00       	call   8048304 <call_gmon_start>
 804828b:	e8 c7 00 00 00       	call   8048357 <frame_dummy>
 8048290:	e8 2f 02 00 00       	call   80484c4 <__do_global_ctors_aux>
 8048295:	c9                   	leave  
 8048296:	c3                   	ret    
Disassembly of section .plt:

08048298 <malloc@plt-0x10>:
 8048298:	ff 35 fc 95 04 08    	push   DWORD PTR ds:0x80495fc
 804829e:	ff 25 00 96 04 08    	jmp    DWORD PTR ds:0x8049600
 80482a4:	00 00                	add    BYTE PTR [eax],al
	...

080482a8 <malloc@plt>:
 80482a8:	ff 25 04 96 04 08    	jmp    DWORD PTR ds:0x8049604
 80482ae:	68 00 00 00 00       	push   0x0
 80482b3:	e9 e0 ff ff ff       	jmp    8048298 <_init+0x18>

080482b8 <__libc_start_main@plt>:
 80482b8:	ff 25 08 96 04 08    	jmp    DWORD PTR ds:0x8049608
 80482be:	68 08 00 00 00       	push   0x8
 80482c3:	e9 d0 ff ff ff       	jmp    8048298 <_init+0x18>

080482c8 <__gmon_start__@plt>:
 80482c8:	ff 25 0c 96 04 08    	jmp    DWORD PTR ds:0x804960c
 80482ce:	68 10 00 00 00       	push   0x10
 80482d3:	e9 c0 ff ff ff       	jmp    8048298 <_init+0x18>
Disassembly of section .text:

080482e0 <_start>:
 80482e0:	31 ed                	xor    ebp,ebp
 80482e2:	5e                   	pop    esi
 80482e3:	89 e1                	mov    ecx,esp
 80482e5:	83 e4 f0             	and    esp,0xfffffff0
 80482e8:	50                   	push   eax
 80482e9:	54                   	push   esp
 80482ea:	52                   	push   edx
 80482eb:	68 60 84 04 08       	push   0x8048460
 80482f0:	68 f0 83 04 08       	push   0x80483f0
 80482f5:	51                   	push   ecx
 80482f6:	56                   	push   esi
 80482f7:	68 7c 83 04 08       	push   0x804837c
 80482fc:	e8 b7 ff ff ff       	call   80482b8 <__libc_start_main@plt>
 8048301:	f4                   	hlt    
 8048302:	90                   	nop    
 8048303:	90                   	nop    

08048304 <call_gmon_start>:
 8048304:	55                   	push   ebp
 8048305:	89 e5                	mov    ebp,esp
 8048307:	53                   	push   ebx
 8048308:	51                   	push   ecx
 8048309:	e8 00 00 00 00       	call   804830e <call_gmon_start+0xa>
 804830e:	5b                   	pop    ebx
 804830f:	81 c3 ea 12 00 00    	add    ebx,0x12ea
 8048315:	8b 93 fc ff ff ff    	mov    edx,DWORD PTR [ebx-0x4]
 804831b:	85 d2                	test   edx,edx
 804831d:	74 05                	je     8048324 <call_gmon_start+0x20>
 804831f:	e8 a4 ff ff ff       	call   80482c8 <__gmon_start__@plt>
 8048324:	58                   	pop    eax
 8048325:	5b                   	pop    ebx
 8048326:	c9                   	leave  
 8048327:	c3                   	ret    

08048328 <__do_global_dtors_aux>:
 8048328:	55                   	push   ebp
 8048329:	89 e5                	mov    ebp,esp
 804832b:	83 ec 08             	sub    esp,0x8
 804832e:	80 3d 1c 96 04 08 00 	cmp    BYTE PTR ds:0x804961c,0x0
 8048335:	74 0c                	je     8048343 <__do_global_dtors_aux+0x1b>
 8048337:	eb 1c                	jmp    8048355 <__do_global_dtors_aux+0x2d>
 8048339:	83 c0 04             	add    eax,0x4
 804833c:	a3 18 96 04 08       	mov    ds:0x8049618,eax
 8048341:	ff d2                	call   edx
 8048343:	a1 18 96 04 08       	mov    eax,ds:0x8049618
 8048348:	8b 10                	mov    edx,DWORD PTR [eax]
 804834a:	85 d2                	test   edx,edx
 804834c:	75 eb                	jne    8048339 <__do_global_dtors_aux+0x11>
 804834e:	c6 05 1c 96 04 08 01 	mov    BYTE PTR ds:0x804961c,0x1
 8048355:	c9                   	leave  
 8048356:	c3                   	ret    

08048357 <frame_dummy>:
 8048357:	55                   	push   ebp
 8048358:	89 e5                	mov    ebp,esp
 804835a:	83 ec 08             	sub    esp,0x8
 804835d:	a1 28 95 04 08       	mov    eax,ds:0x8049528
 8048362:	85 c0                	test   eax,eax
 8048364:	74 12                	je     8048378 <frame_dummy+0x21>
 8048366:	b8 00 00 00 00       	mov    eax,0x0
 804836b:	85 c0                	test   eax,eax
 804836d:	74 09                	je     8048378 <frame_dummy+0x21>
 804836f:	c7 04 24 28 95 04 08 	mov    DWORD PTR [esp],0x8049528
 8048376:	ff d0                	call   eax
 8048378:	c9                   	leave  
 8048379:	c3                   	ret    
 804837a:	90                   	nop    
 804837b:	90                   	nop    

0804837c <main>:
#include <stdlib.h>

int main(int argc, char **argv)
{
 804837c:	55                   	push   ebp
 804837d:	89 e5                	mov    ebp,esp
 804837f:	83 ec 18             	sub    esp,0x18
 8048382:	83 e4 f0             	and    esp,0xfffffff0
 8048385:	b8 00 00 00 00       	mov    eax,0x0
 804838a:	83 c0 0f             	add    eax,0xf
 804838d:	83 c0 0f             	add    eax,0xf
 8048390:	c1 e8 04             	shr    eax,0x4
 8048393:	c1 e0 04             	shl    eax,0x4
 8048396:	29 c4                	sub    esp,eax
	size_t size = 15;
 8048398:	c7 45 f4 0f 00 00 00 	mov    DWORD PTR [ebp-12],0xf
	int count = 0;
 804839f:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-8],0x0

	if ('.' <= **argv)
 80483a6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+12]
 80483a9:	8b 00                	mov    eax,DWORD PTR [eax]
 80483ab:	0f b6 00             	movzx  eax,BYTE PTR [eax]
 80483ae:	3c 2d                	cmp    al,0x2d
 80483b0:	7e 06                	jle    80483b8 <main+0x3c>
		count -= 2;
 80483b2:	8d 45 f8             	lea    eax,[ebp-8]
 80483b5:	83 28 02             	sub    DWORD PTR [eax],0x2

	if ('\\' != **argv)
 80483b8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+12]
 80483bb:	8b 00                	mov    eax,DWORD PTR [eax]
 80483bd:	0f b6 00             	movzx  eax,BYTE PTR [eax]
 80483c0:	3c 5c                	cmp    al,0x5c
 80483c2:	74 09                	je     80483cd <main+0x51>
		count += 260;
 80483c4:	8d 45 f8             	lea    eax,[ebp-8]
 80483c7:	81 00 04 01 00 00    	add    DWORD PTR [eax],0x104

	void *p = malloc(size + count);
 80483cd:	8b 45 f8             	mov    eax,DWORD PTR [ebp-8]
 80483d0:	03 45 f4             	add    eax,DWORD PTR [ebp-12]
 80483d3:	89 04 24             	mov    DWORD PTR [esp],eax
 80483d6:	e8 cd fe ff ff       	call   80482a8 <malloc@plt>
 80483db:	89 45 fc             	mov    DWORD PTR [ebp-4],eax

	////<exploitable />
	((char *)p)[size] = 0;
 80483de:	8b 55 fc             	mov    edx,DWORD PTR [ebp-4]
 80483e1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-12]
 80483e4:	8d 04 02             	lea    eax,[edx+eax]
 80483e7:	c6 00 00             	mov    BYTE PTR [eax],0x0
}
 80483ea:	c9                   	leave  
 80483eb:	c3                   	ret    
 80483ec:	90                   	nop    
 80483ed:	90                   	nop    
 80483ee:	90                   	nop    
 80483ef:	90                   	nop    

080483f0 <__libc_csu_init>:
 80483f0:	55                   	push   ebp
 80483f1:	89 e5                	mov    ebp,esp
 80483f3:	83 ec 18             	sub    esp,0x18
 80483f6:	89 5d f4             	mov    DWORD PTR [ebp-12],ebx
 80483f9:	e8 bf 00 00 00       	call   80484bd <__i686.get_pc_thunk.bx>
 80483fe:	81 c3 fa 11 00 00    	add    ebx,0x11fa
 8048404:	89 75 f8             	mov    DWORD PTR [ebp-8],esi
 8048407:	89 7d fc             	mov    DWORD PTR [ebp-4],edi
 804840a:	e8 71 fe ff ff       	call   8048280 <_init>
 804840f:	8d 83 20 ff ff ff    	lea    eax,[ebx-0xe0]
 8048415:	8d 93 20 ff ff ff    	lea    edx,[ebx-0xe0]
 804841b:	29 d0                	sub    eax,edx
 804841d:	c1 f8 02             	sar    eax,0x2
 8048420:	89 45 f0             	mov    DWORD PTR [ebp-16],eax
 8048423:	75 0d                	jne    8048432 <__libc_csu_init+0x42>
 8048425:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-12]
 8048428:	8b 75 f8             	mov    esi,DWORD PTR [ebp-8]
 804842b:	8b 7d fc             	mov    edi,DWORD PTR [ebp-4]
 804842e:	89 ec                	mov    esp,ebp
 8048430:	5d                   	pop    ebp
 8048431:	c3                   	ret    
 8048432:	31 ff                	xor    edi,edi
 8048434:	89 d6                	mov    esi,edx
 8048436:	8d 76 00             	lea    esi,[esi]
 8048439:	8d bc 27 00 00 00 00 	lea    edi,[edi]
 8048440:	47                   	inc    edi
 8048441:	ff 16                	call   DWORD PTR [esi]
 8048443:	83 c6 04             	add    esi,0x4
 8048446:	3b 7d f0             	cmp    edi,DWORD PTR [ebp-16]
 8048449:	72 f5                	jb     8048440 <__libc_csu_init+0x50>
 804844b:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-12]
 804844e:	8b 75 f8             	mov    esi,DWORD PTR [ebp-8]
 8048451:	8b 7d fc             	mov    edi,DWORD PTR [ebp-4]
 8048454:	89 ec                	mov    esp,ebp
 8048456:	5d                   	pop    ebp
 8048457:	c3                   	ret    
 8048458:	90                   	nop    
 8048459:	8d b4 26 00 00 00 00 	lea    esi,[esi]

08048460 <__libc_csu_fini>:
 8048460:	55                   	push   ebp
 8048461:	89 e5                	mov    ebp,esp
 8048463:	83 ec 18             	sub    esp,0x18
 8048466:	89 5d f4             	mov    DWORD PTR [ebp-12],ebx
 8048469:	e8 4f 00 00 00       	call   80484bd <__i686.get_pc_thunk.bx>
 804846e:	81 c3 8a 11 00 00    	add    ebx,0x118a
 8048474:	89 75 f8             	mov    DWORD PTR [ebp-8],esi
 8048477:	89 7d fc             	mov    DWORD PTR [ebp-4],edi
 804847a:	8d 83 20 ff ff ff    	lea    eax,[ebx-0xe0]
 8048480:	8d 93 20 ff ff ff    	lea    edx,[ebx-0xe0]
 8048486:	29 d0                	sub    eax,edx
 8048488:	c1 f8 02             	sar    eax,0x2
 804848b:	89 45 f0             	mov    DWORD PTR [ebp-16],eax
 804848e:	48                   	dec    eax
 804848f:	83 f8 ff             	cmp    eax,0xffffffff
 8048492:	74 17                	je     80484ab <__libc_csu_fini+0x4b>
 8048494:	8d 34 82             	lea    esi,[edx+eax*4]
 8048497:	31 ff                	xor    edi,edi
 8048499:	8d b4 26 00 00 00 00 	lea    esi,[esi]
 80484a0:	47                   	inc    edi
 80484a1:	ff 16                	call   DWORD PTR [esi]
 80484a3:	83 ee 04             	sub    esi,0x4
 80484a6:	39 7d f0             	cmp    DWORD PTR [ebp-16],edi
 80484a9:	75 f5                	jne    80484a0 <__libc_csu_fini+0x40>
 80484ab:	e8 40 00 00 00       	call   80484f0 <_fini>
 80484b0:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-12]
 80484b3:	8b 75 f8             	mov    esi,DWORD PTR [ebp-8]
 80484b6:	8b 7d fc             	mov    edi,DWORD PTR [ebp-4]
 80484b9:	89 ec                	mov    esp,ebp
 80484bb:	5d                   	pop    ebp
 80484bc:	c3                   	ret    

080484bd <__i686.get_pc_thunk.bx>:
 80484bd:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
 80484c0:	c3                   	ret    
 80484c1:	90                   	nop    
 80484c2:	90                   	nop    
 80484c3:	90                   	nop    

080484c4 <__do_global_ctors_aux>:
 80484c4:	55                   	push   ebp
 80484c5:	89 e5                	mov    ebp,esp
 80484c7:	53                   	push   ebx
 80484c8:	83 ec 04             	sub    esp,0x4
 80484cb:	a1 18 95 04 08       	mov    eax,ds:0x8049518
 80484d0:	83 f8 ff             	cmp    eax,0xffffffff
 80484d3:	74 12                	je     80484e7 <__do_global_ctors_aux+0x23>
 80484d5:	bb 18 95 04 08       	mov    ebx,0x8049518
 80484da:	ff d0                	call   eax
 80484dc:	8b 43 fc             	mov    eax,DWORD PTR [ebx-4]
 80484df:	83 eb 04             	sub    ebx,0x4
 80484e2:	83 f8 ff             	cmp    eax,0xffffffff
 80484e5:	75 f3                	jne    80484da <__do_global_ctors_aux+0x16>
 80484e7:	83 c4 04             	add    esp,0x4
 80484ea:	5b                   	pop    ebx
 80484eb:	5d                   	pop    ebp
 80484ec:	c3                   	ret    
 80484ed:	90                   	nop    
 80484ee:	90                   	nop    
 80484ef:	90                   	nop    
Disassembly of section .fini:

080484f0 <_fini>:
 80484f0:	55                   	push   ebp
 80484f1:	89 e5                	mov    ebp,esp
 80484f3:	53                   	push   ebx
 80484f4:	50                   	push   eax
 80484f5:	e8 00 00 00 00       	call   80484fa <_fini+0xa>
 80484fa:	5b                   	pop    ebx
 80484fb:	81 c3 fe 10 00 00    	add    ebx,0x10fe
 8048501:	e8 22 fe ff ff       	call   8048328 <__do_global_dtors_aux>
 8048506:	58                   	pop    eax
 8048507:	5b                   	pop    ebx
 8048508:	c9                   	leave  
 8048509:	c3                   	ret    
