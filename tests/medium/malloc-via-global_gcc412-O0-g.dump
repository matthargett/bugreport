
malloc-via-global_gcc412-O0-g:     file format elf32-i386

Disassembly of section .init:

08048258 <_init>:
 8048258:	55                   	push   ebp
 8048259:	89 e5                	mov    ebp,esp
 804825b:	83 ec 08             	sub    esp,0x8
 804825e:	e8 71 00 00 00       	call   80482d4 <call_gmon_start>
 8048263:	e8 c8 00 00 00       	call   8048330 <frame_dummy>
 8048268:	e8 a3 01 00 00       	call   8048410 <__do_global_ctors_aux>
 804826d:	c9                   	leave  
 804826e:	c3                   	ret    
Disassembly of section .plt:

08048270 <malloc@plt-0x10>:
 8048270:	ff 35 48 95 04 08    	push   DWORD PTR ds:0x8049548
 8048276:	ff 25 4c 95 04 08    	jmp    DWORD PTR ds:0x804954c
 804827c:	00 00                	add    BYTE PTR [eax],al
	...

08048280 <malloc@plt>:
 8048280:	ff 25 50 95 04 08    	jmp    DWORD PTR ds:0x8049550
 8048286:	68 00 00 00 00       	push   0x0
 804828b:	e9 e0 ff ff ff       	jmp    8048270 <_init+0x18>

08048290 <__libc_start_main@plt>:
 8048290:	ff 25 54 95 04 08    	jmp    DWORD PTR ds:0x8049554
 8048296:	68 08 00 00 00       	push   0x8
 804829b:	e9 d0 ff ff ff       	jmp    8048270 <_init+0x18>

080482a0 <__gmon_start__@plt>:
 80482a0:	ff 25 58 95 04 08    	jmp    DWORD PTR ds:0x8049558
 80482a6:	68 10 00 00 00       	push   0x10
 80482ab:	e9 c0 ff ff ff       	jmp    8048270 <_init+0x18>
Disassembly of section .text:

080482b0 <_start>:
 80482b0:	31 ed                	xor    ebp,ebp
 80482b2:	5e                   	pop    esi
 80482b3:	89 e1                	mov    ecx,esp
 80482b5:	83 e4 f0             	and    esp,0xfffffff0
 80482b8:	50                   	push   eax
 80482b9:	54                   	push   esp
 80482ba:	52                   	push   edx
 80482bb:	68 90 83 04 08       	push   0x8048390
 80482c0:	68 a0 83 04 08       	push   0x80483a0
 80482c5:	51                   	push   ecx
 80482c6:	56                   	push   esi
 80482c7:	68 54 83 04 08       	push   0x8048354
 80482cc:	e8 bf ff ff ff       	call   8048290 <__libc_start_main@plt>
 80482d1:	f4                   	hlt    
 80482d2:	90                   	nop    
 80482d3:	90                   	nop    

080482d4 <call_gmon_start>:
 80482d4:	55                   	push   ebp
 80482d5:	89 e5                	mov    ebp,esp
 80482d7:	53                   	push   ebx
 80482d8:	83 ec 04             	sub    esp,0x4
 80482db:	e8 00 00 00 00       	call   80482e0 <call_gmon_start+0xc>
 80482e0:	5b                   	pop    ebx
 80482e1:	81 c3 64 12 00 00    	add    ebx,0x1264
 80482e7:	8b 93 fc ff ff ff    	mov    edx,DWORD PTR [ebx-0x4]
 80482ed:	85 d2                	test   edx,edx
 80482ef:	74 05                	je     80482f6 <call_gmon_start+0x22>
 80482f1:	e8 aa ff ff ff       	call   80482a0 <__gmon_start__@plt>
 80482f6:	58                   	pop    eax
 80482f7:	5b                   	pop    ebx
 80482f8:	c9                   	leave  
 80482f9:	c3                   	ret    
 80482fa:	90                   	nop    
 80482fb:	90                   	nop    
 80482fc:	90                   	nop    
 80482fd:	90                   	nop    
 80482fe:	90                   	nop    
 80482ff:	90                   	nop    

08048300 <__do_global_dtors_aux>:
 8048300:	55                   	push   ebp
 8048301:	89 e5                	mov    ebp,esp
 8048303:	83 ec 08             	sub    esp,0x8
 8048306:	80 3d 68 95 04 08 00 	cmp    BYTE PTR ds:0x8049568,0x0
 804830d:	74 0c                	je     804831b <__do_global_dtors_aux+0x1b>
 804830f:	eb 1c                	jmp    804832d <__do_global_dtors_aux+0x2d>
 8048311:	83 c0 04             	add    eax,0x4
 8048314:	a3 64 95 04 08       	mov    ds:0x8049564,eax
 8048319:	ff d2                	call   edx
 804831b:	a1 64 95 04 08       	mov    eax,ds:0x8049564
 8048320:	8b 10                	mov    edx,DWORD PTR [eax]
 8048322:	85 d2                	test   edx,edx
 8048324:	75 eb                	jne    8048311 <__do_global_dtors_aux+0x11>
 8048326:	c6 05 68 95 04 08 01 	mov    BYTE PTR ds:0x8049568,0x1
 804832d:	c9                   	leave  
 804832e:	c3                   	ret    
 804832f:	90                   	nop    

08048330 <frame_dummy>:
 8048330:	55                   	push   ebp
 8048331:	89 e5                	mov    ebp,esp
 8048333:	83 ec 08             	sub    esp,0x8
 8048336:	a1 74 94 04 08       	mov    eax,ds:0x8049474
 804833b:	85 c0                	test   eax,eax
 804833d:	74 12                	je     8048351 <frame_dummy+0x21>
 804833f:	b8 00 00 00 00       	mov    eax,0x0
 8048344:	85 c0                	test   eax,eax
 8048346:	74 09                	je     8048351 <frame_dummy+0x21>
 8048348:	c7 04 24 74 94 04 08 	mov    DWORD PTR [esp],0x8049474
 804834f:	ff d0                	call   eax
 8048351:	c9                   	leave  
 8048352:	c3                   	ret    
 8048353:	90                   	nop    

08048354 <main>:

static const size_t size = 260;

int main(int argc, char **argv)
{
 8048354:	8d 4c 24 04          	lea    ecx,[esp+4]
 8048358:	83 e4 f0             	and    esp,0xfffffff0
 804835b:	ff 71 fc             	push   DWORD PTR [ecx-4]
 804835e:	55                   	push   ebp
 804835f:	89 e5                	mov    ebp,esp
 8048361:	51                   	push   ecx
 8048362:	83 ec 14             	sub    esp,0x14
	void *p = malloc(size);
 8048365:	a1 5c 84 04 08       	mov    eax,ds:0x804845c
 804836a:	89 04 24             	mov    DWORD PTR [esp],eax
 804836d:	e8 0e ff ff ff       	call   8048280 <malloc@plt>
 8048372:	89 45 f8             	mov    DWORD PTR [ebp-8],eax
	((char *)p)[16] = 0;
 8048375:	8b 45 f8             	mov    eax,DWORD PTR [ebp-8]
 8048378:	83 c0 10             	add    eax,0x10
 804837b:	c6 00 00             	mov    BYTE PTR [eax],0x0
}
 804837e:	83 c4 14             	add    esp,0x14
 8048381:	59                   	pop    ecx
 8048382:	5d                   	pop    ebp
 8048383:	8d 61 fc             	lea    esp,[ecx-4]
 8048386:	c3                   	ret    
 8048387:	90                   	nop    
 8048388:	90                   	nop    
 8048389:	90                   	nop    
 804838a:	90                   	nop    
 804838b:	90                   	nop    
 804838c:	90                   	nop    
 804838d:	90                   	nop    
 804838e:	90                   	nop    
 804838f:	90                   	nop    

08048390 <__libc_csu_fini>:
 8048390:	55                   	push   ebp
 8048391:	89 e5                	mov    ebp,esp
 8048393:	5d                   	pop    ebp
 8048394:	c3                   	ret    
 8048395:	8d 74 26 00          	lea    esi,[esi]
 8048399:	8d bc 27 00 00 00 00 	lea    edi,[edi]

080483a0 <__libc_csu_init>:
 80483a0:	55                   	push   ebp
 80483a1:	89 e5                	mov    ebp,esp
 80483a3:	57                   	push   edi
 80483a4:	56                   	push   esi
 80483a5:	53                   	push   ebx
 80483a6:	e8 5e 00 00 00       	call   8048409 <__i686.get_pc_thunk.bx>
 80483ab:	81 c3 99 11 00 00    	add    ebx,0x1199
 80483b1:	83 ec 1c             	sub    esp,0x1c
 80483b4:	e8 9f fe ff ff       	call   8048258 <_init>
 80483b9:	8d 83 20 ff ff ff    	lea    eax,[ebx-0xe0]
 80483bf:	89 45 f0             	mov    DWORD PTR [ebp-16],eax
 80483c2:	8d 83 20 ff ff ff    	lea    eax,[ebx-0xe0]
 80483c8:	29 45 f0             	sub    DWORD PTR [ebp-16],eax
 80483cb:	c1 7d f0 02          	sar    DWORD PTR [ebp-16],0x2
 80483cf:	8b 55 f0             	mov    edx,DWORD PTR [ebp-16]
 80483d2:	85 d2                	test   edx,edx
 80483d4:	74 2b                	je     8048401 <__libc_csu_init+0x61>
 80483d6:	31 ff                	xor    edi,edi
 80483d8:	89 c6                	mov    esi,eax
 80483da:	8d b6 00 00 00 00    	lea    esi,[esi]
 80483e0:	8b 45 10             	mov    eax,DWORD PTR [ebp+16]
 80483e3:	83 c7 01             	add    edi,0x1
 80483e6:	89 44 24 08          	mov    DWORD PTR [esp+8],eax
 80483ea:	8b 45 0c             	mov    eax,DWORD PTR [ebp+12]
 80483ed:	89 44 24 04          	mov    DWORD PTR [esp+4],eax
 80483f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+8]
 80483f4:	89 04 24             	mov    DWORD PTR [esp],eax
 80483f7:	ff 16                	call   DWORD PTR [esi]
 80483f9:	83 c6 04             	add    esi,0x4
 80483fc:	39 7d f0             	cmp    DWORD PTR [ebp-16],edi
 80483ff:	75 df                	jne    80483e0 <__libc_csu_init+0x40>
 8048401:	83 c4 1c             	add    esp,0x1c
 8048404:	5b                   	pop    ebx
 8048405:	5e                   	pop    esi
 8048406:	5f                   	pop    edi
 8048407:	5d                   	pop    ebp
 8048408:	c3                   	ret    

08048409 <__i686.get_pc_thunk.bx>:
 8048409:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
 804840c:	c3                   	ret    
 804840d:	90                   	nop    
 804840e:	90                   	nop    
 804840f:	90                   	nop    

08048410 <__do_global_ctors_aux>:
 8048410:	55                   	push   ebp
 8048411:	89 e5                	mov    ebp,esp
 8048413:	53                   	push   ebx
 8048414:	bb 64 94 04 08       	mov    ebx,0x8049464
 8048419:	83 ec 04             	sub    esp,0x4
 804841c:	a1 64 94 04 08       	mov    eax,ds:0x8049464
 8048421:	83 f8 ff             	cmp    eax,0xffffffff
 8048424:	74 0c                	je     8048432 <__do_global_ctors_aux+0x22>
 8048426:	83 eb 04             	sub    ebx,0x4
 8048429:	ff d0                	call   eax
 804842b:	8b 03                	mov    eax,DWORD PTR [ebx]
 804842d:	83 f8 ff             	cmp    eax,0xffffffff
 8048430:	75 f4                	jne    8048426 <__do_global_ctors_aux+0x16>
 8048432:	83 c4 04             	add    esp,0x4
 8048435:	5b                   	pop    ebx
 8048436:	5d                   	pop    ebp
 8048437:	c3                   	ret    
Disassembly of section .fini:

08048438 <_fini>:
 8048438:	55                   	push   ebp
 8048439:	89 e5                	mov    ebp,esp
 804843b:	53                   	push   ebx
 804843c:	83 ec 04             	sub    esp,0x4
 804843f:	e8 00 00 00 00       	call   8048444 <_fini+0xc>
 8048444:	5b                   	pop    ebx
 8048445:	81 c3 00 11 00 00    	add    ebx,0x1100
 804844b:	e8 b0 fe ff ff       	call   8048300 <__do_global_dtors_aux>
 8048450:	59                   	pop    ecx
 8048451:	5b                   	pop    ebx
 8048452:	c9                   	leave  
 8048453:	c3                   	ret    
